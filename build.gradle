// (c) https://github.com/MontiCore/monticore

/* ============================================================ */
/* ========================= Plugins ========================== */
/* ============================================================ */

plugins {
    id "java"
    id "monticore" version "$mc_version"
    id "maven-publish"
    id "org.unbroken-dome.test-sets" version "3.0.1"
    id "com.github.johnrengelman.shadow" version "4.0.4"
}

/* ============================================================ */
/* ========================= Project ========================== */
/* ============================================================ */

group = "de.monticore.lang"
description = "XML"
sourceCompatibility = JavaVersion.VERSION_11

/* ============================================================ */
/* ========================= Versions ========================= */
/* ============================================================ */

ext {
    junit_version = "4.13.1"
    findbugs_version = "3.0.0"
    guava_version = "31.1-jre"
    antlr_version = "4.12.0"
    assertj_version = "3.7.0"
    se_commons_version = "7.6.0-SNAPSHOT"
    commons_cli_version = "1.4"
    logback_version = "1.1.2"
    grammar_classifier = "grammars"
    grammarDir = "src/main/grammars"
    commons_lang_version = "3.0"
}

/* ============================================================ */
/* ======================= Configuration ====================== */
/* ============================================================ */

// configure non-standard source sets
sourceSets {
    main.java.srcDirs += [ "$projectDir/target/generated-sources/monticore/sourcecode"]

    test {
        java.srcDir "$projectDir/src/test/java"
        java.srcDir "$projectDir/target/generated-test-sources/monticore/sourcecode"
        resources.srcDir "$projectDir/src/test/resources"
    }
    grammars {
        resources {
            srcDirs(grammarDir)
            include "**/*.mc4"
        }
    }
}

buildDir = file("$projectDir/target")

configurations { grammar }

java {
    registerFeature('grammars') {
        usingSourceSet(sourceSets.grammars)
    }
}

test {
    useJUnit()
}

/* ============================================================ */
/* ======================= Dependencies ======================= */
/* ============================================================ */

repositories {
    if(("true").equals(getProperty('useLocalRepo'))){
        mavenLocal()
    }
    mavenCentral()
    maven {
        credentials.username mavenUser
        credentials.password mavenPassword
        url repo
    }
}

dependencies {
    grammar ("de.monticore:monticore-grammar:$mc_version") {capabilities {
      requireCapability("de.monticore:monticore-grammar-grammars") }
    }
    implementation "de.se_rwth.commons:se-commons-logging:$se_commons_version"
    implementation "org.apache.commons:commons-lang3:$commons_lang_version"
    implementation "org.antlr:antlr4-runtime:$antlr_version"
    implementation "de.monticore:monticore-generator:${project.properties['mc_version']}"
    implementation "de.monticore:monticore-runtime:${project.properties['mc_version']}"
    implementation "de.monticore:monticore-grammar:${project.properties['mc_version']}"
    implementation "org.assertj:assertj-core:$assertj_version"
    implementation "commons-cli:commons-cli:$commons_cli_version"
    implementation "com.google.guava:guava:$guava_version"
    implementation "com.google.code.findbugs:jsr305:$findbugs_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "de.monticore:monticore-runtime:${project.properties['mc_version']}"
    testImplementation "ch.qos.logback:logback-classic:$logback_version"
   // compileOnly "de.monticore:monticore-grammar:${project.properties['mc_version']}"
}

/* ============================================================ */
/* ========================== Tasks =========================== */
/* ============================================================ */

task generateXMLBasis(type: MCTask) {
    grammar = file "$projectDir/$grammarDir/de/monticore/lang/XMLBasis.mc4"
    outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
    handcodedPath "$projectDir/src/main/java"
    def uptoDate = incCheck("de/monticore/lang/XMLBasis.mc4")
    outputs.upToDateWhen { uptoDate }
}

task generateXMLLight(type: MCTask) {
    grammar = file "$projectDir/$grammarDir/de/monticore/lang/XMLLight.mc4"
    outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
    handcodedPath "$projectDir/src/main/java"
    def uptoDate = incCheck("de/monticore/lang/XMLLight.mc4")
    outputs.upToDateWhen { uptoDate }
    dependsOn(generateXMLBasis)
}

task generateFullXML(type: MCTask) {
    grammar = file "$projectDir/$grammarDir/de/monticore/lang/FullXML.mc4"
    outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
    handcodedPath "$projectDir/src/main/java"
    def uptoDate = incCheck("de/monticore/lang/FullXML.mc4")
    outputs.upToDateWhen { uptoDate }
    dependsOn(generateXMLLight)
}

task generateLangEmbeddingFullXML(type: MCTask) {
  grammar = file "$projectDir/src/test/grammars/LangEmbeddingFullXML.mc4"
  outputDir = file "$buildDir/generated-test-sources/monticore/sourcecode"
  handcodedPath "$projectDir/src/test/java"
  def uptoDate = incCheck("LangEmbeddingFullXML.mc4")
  outputs.upToDateWhen { uptoDate }
  dependsOn(generateFullXML)
}

compileJava.dependsOn(generateXMLBasis,generateXMLLight,generateFullXML)

compileTestJava {
    dependsOn project.collect { it.tasks.withType(MCTask) }
}

tasks.withType(Copy).all { duplicatesStrategy 'exclude' }

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.deprecation = false
    options.warnings = false
}

// build sources jar in addition
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}

sourcesJar.dependsOn project.collect { it.tasks.withType(MCTask).findAll{ it != tasks.generateLangEmbeddingFullXML } }

// build javadoc jar in addition
task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = "javadoc"
}

// generated java doc contains errors, disable for now
javadoc.failOnError(false)

// build grammar jar as well
task grammarJar(type: Jar) {
    from("$projectDir/src/main/grammars/") { include "**/*.mc4" }
    archiveClassifier = "grammars"
}
jar.dependsOn grammarJar
// all in one tool-jar
shadowJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes "Main-Class": "de.monticore.lang.xmllight.XMLLightTool"
    }
    archiveFileName = "MCXML.jar"
    archiveClassifier = "mc-tool"
}
jar.dependsOn shadowJar

/* ============================================================ */
/* ======================= Publishing ========================= */
/* ============================================================ */

publishing {
    // configure what artifacts to publish
    publications {
        mavenJava(MavenPublication) {
            artifactId = "$project.name"
            from components.java
            artifact sourcesJar
            artifact javadocJar
            artifact shadowJar
        }
    }
    repositories.maven {
        credentials.username mavenUser
        credentials.password mavenPassword
        def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
        def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
        url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
    }
}

